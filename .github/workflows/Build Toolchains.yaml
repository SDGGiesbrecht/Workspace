
name: Build Toolchains

on: [push, pull_request]

jobs:
  Linux:
    runs-on: ubuntu-18.04
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Install Swift dependencies
      # Based on https://github.com/apple/swift#linux
      shell: bash
      run: |
        set -x
        sudo apt-get update --assume-yes
        sudo apt-get install --assume-yes \
          clang \
          cmake \
          git \
          icu-devtools \
          libcurl4-openssl-dev \
          libedit-dev \
          libicu-dev \
          libncurses5-dev \
          libpython-dev \
          libsqlite3-dev \
          libxml2-dev \
          ninja-build \
          pkg-config \
          python \
          python-six \
          rsync \
          swig \
          systemtap-sdt-dev \
          tzdata \
          uuid-dev
    - name: Check Android NDK
      shell: bash
      run: |
        set -x
        export PATH="${ANDROID_HOME}/ndk-bundle:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        which ndk-build
    - name: Fetch ICU source
      shell: bash
      run: |
        set -x
        git clone https://github.com/unicode-org/icu --branch release-65-1 --depth 1
    - name: Build ICU for Linux
      # Based on https://htmlpreview.github.io/?https://github.com/unicode-org/icu/blob/master/icu4c/readme.html#HowToBuildUNIX
      shell: bash
      run: |
        set -x
        mkdir icu4c-build-linux
        cd icu4c-build-linux
        ../icu/icu4c/source/runConfigureICU Linux
        make
    - name: Build ICU for Android
      # Based on https://htmlpreview.github.io/?https://github.com/unicode-org/icu/blob/master/icu4c/readme.html#HowToCrossCompileICU
      shell: bash
      run: |
        set -x
        mkdir icu4c-build-android
        cd icu4c-build-android
        ../icu/icu4c/source/configure \
          --host=x86_64-unknown-linux-android \
          --with-cross-build=${GITHUB_WORKSPACE}/icu4c-build-linux \
          --prefix=${GITHUB_WORKSPACE}/Android/ICU
        make
        make install
        find ${GITHUB_WORKSPACE}/Android/ICU
    - name: Upload ICU
      uses: actions/upload-artifact@v1
      with:
        name: ICU
        path: Android/ICU
    - name: Clean ICU source up
      shell: bash
      run: |
        set -x
        rm -rf icu
    - name: Fetch Swift source
      # Based on https://github.com/apple/swift#getting-sources-for-swift-and-related-projects
      shell: bash
      run: |
        set -x
        mkdir swift-source
        cd swift-source
        git clone https://github.com/apple/swift.git --depth 1
        ./swift/utils/update-checkout --clone --skip-history
    - name: Build Swift for Linux
      # Based on https://github.com/apple/swift/blob/master/utils/build-toolchain
      # Also based on https://github.com/apple/swift/blob/master/utils/build-presets.ini
      shell: bash
      run: |
        set -x
        cd swift-source/swift
        ./utils/build-script --release \
          --install-destdir ${GITHUB_WORKSPACE}/Linux/Swift \
          --install-swift \
          --install-swiftpm
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swiftc --version
    - name: Prepare LLVM for Android
      # Based on https://github.com/apple/swift/blob/master/docs/AndroidBuild.md#building-swift-sdk-for-android-on-windows
      # Also based on https://github.com/compnerd/swift-build/blob/master/.ci/vs2019.yml
      shell: bash
      run: |
        set -x
        mkdir swift-build
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/llvm-project/llvm \
          -B LLVM \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_HOST_TRIPLE=x86_64-unknown-linux-android
    - name: Build standard library for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift \
          -B Standard_Library \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidStandardLibrary.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_DIR=${GITHUB_WORKSPACE}/swift-build/LLVM/lib/cmake/llvm \
          -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=${GITHUB_WORKSPACE}/Linux/Swift/usr/bin \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D SWIFT_ANDROID_x86_64_ICU_UC_INCLUDE=${GITHUB_WORKSPACE}/Android/ICU/include/unicode \
          -D SWIFT_ANDROID_x86_64_ICU_UC=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.65.1 \
          -D SWIFT_ANDROID_x86_64_ICU_I18N_INCLUDE=${GITHUB_WORKSPACE}/Android/ICU/include \
          -D SWIFT_ANDROID_x86_64_ICU_I18N=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.65.1
        cmake --build Standard_Library --target install
    - name: Upload Android SDK
      uses: actions/upload-artifact@v1
      with:
        name: Android.sdk
        path: Android/Swift/Android.sdk
    - name: Test SDK
      shell: bash
      run: |
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swift \
          --package-path HelloWorld \
          --build-tests --enable-test-discovery \
          --triple x86_64-unknown-linux-android \
          --sdk ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -Xswiftc -resource-dir -Xswiftc ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr/lib/swift \
          -Xswiftc -tools-directory -Xswiftc ${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin \
          -Xswiftc -Xclang-linker -Xswiftc --gcc-toolchain=${ANDROID_HOME}/ndk-bundle/toolchains/x86_64-4.9/prebuilt/linux-x86_64 \
          -Xswiftc -Xclang-linker -Xswiftc --sysroot=${ANDROID_HOME}/ndk-bundle/platforms/android-29/arch-x86_64 \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include/x86_64-linux-android \
          -Xswiftc -I -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android/x86_64 \
          -Xswiftc -L -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android
