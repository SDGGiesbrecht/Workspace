
name: Build Toolchains

on: [push, pull_request]

jobs:
  Linux:
    runs-on: ubuntu-18.04
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Make space
      # Because GitHubâ€™s host does not have enough memory without clearing other stuff out.
      shell: bash
      run: |
        set -x
        du --human-readable --max-depth=1 / || true
        du --human-readable --max-depth=1 /usr || true
        du --human-readable --max-depth=1 /usr/share || true
        rm -rf /usr/share/dotnet
        du --human-readable --max-depth=1 /usr/share || true
    - name: Install Swift dependencies
      # Based on https://github.com/apple/swift#linux
      shell: bash
      run: |
        set -x
        sudo apt-get update --assume-yes
        sudo apt-get install --assume-yes \
          clang-7 \
          cmake \
          git \
          icu-devtools \
          libcurl4-openssl-dev \
          libedit-dev \
          libicu-dev \
          libncurses5-dev \
          libpython-dev \
          libsqlite3-dev \
          libxml2-dev \
          ninja-build \
          pkg-config \
          python \
          python-six \
          rsync \
          swig \
          systemtap-sdt-dev \
          tzdata \
          uuid-dev
    - name: Fetch Android NDK
      shell: bash
      run: |
        set -x
        curl --location \
          'https://dl.google.com/android/repository/android-ndk-r21d-linux-x86_64.zip' \
          --output '/tmp/android-ndk-r21d-linux-x86_64.zip'
        unzip /tmp/android-ndk-r21d-linux-x86_64.zip -d /tmp
        rm -rf ${ANDROID_HOME}/ndk-bundle
        sudo mkdir -p ${ANDROID_HOME}/ndk-bundle
        sudo cp -R /tmp/android-ndk-r21d/* ${ANDROID_HOME}/ndk-bundle
        export PATH="${ANDROID_HOME}/ndk-bundle:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        which ndk-build
    - name: Fetch ICU source
      shell: bash
      run: |
        set -x
        git clone https://github.com/unicode-org/icu --branch release-67-1 --depth 1
    - name: Build ICU for Linux
      # Based on https://htmlpreview.github.io/?https://github.com/unicode-org/icu/blob/master/icu4c/readme.html#HowToBuildUNIX
      shell: bash
      run: |
        set -x
        mkdir icu4c-build-linux
        cd icu4c-build-linux
        ../icu/icu4c/source/runConfigureICU Linux
        make
    - name: Create Android C toolchain
      # Based on https://gist.github.com/DanielSerdyukov/188d47e29150622352f1
      shell: bash
      run: |
        set -x
        ${ANDROID_HOME}/ndk-bundle/build/tools/make-standalone-toolchain.sh \
          --install-dir=${GITHUB_WORKSPACE}/Android/C
        find ${GITHUB_WORKSPACE}/Android/C
    - name: Build ICU for Android
      # Based on https://htmlpreview.github.io/?https://github.com/unicode-org/icu/blob/master/icu4c/readme.html#HowToCrossCompileICU
      shell: bash
      run: |
        set -x
        mkdir icu4c-build-android
        cd icu4c-build-android
        ../icu/icu4c/source/configure \
          --host=x86_64-unknown-linux-android \
          --with-cross-build=${GITHUB_WORKSPACE}/icu4c-build-linux \
          --prefix=${GITHUB_WORKSPACE}/Android/ICU \
          CC=${GITHUB_WORKSPACE}/Android/C/bin/x86_64-linux-android29-clang \
          CXX=${GITHUB_WORKSPACE}/Android/C/bin/x86_64-linux-android29-clang++ \
          RANLIB=${GITHUB_WORKSPACE}/Android/C/bin/x86_64-linux-android-ranlib \
          AR=${GITHUB_WORKSPACE}/Android/C/bin/x86_64-linux-android-ar \
          --enable-layoutex=no
        make
        make install
        find ${GITHUB_WORKSPACE}/Android/ICU
    - name: Upload ICU
      uses: actions/upload-artifact@v1
      with:
        name: ICU
        path: Android/ICU
    - name: Clean ICU source up
      shell: bash
      run: |
        set -x
        rm -rf icu
    - name: Fetch Swift source
      # Based on https://github.com/apple/swift#getting-sources-for-swift-and-related-projects
      shell: bash
      run: |
        set -x
        mkdir swift-source
        cd swift-source
        git clone https://github.com/apple/swift.git --branch swift-5.3.3-RELEASE --depth 1
        ./swift/utils/update-checkout --tag swift-5.3.3-RELEASE --clone
    - name: Clean out Swift history
      shell: bash
      run: |
        set -x
        cd swift-source
        find . -type d -name .git -prune -exec rm -rf {} \;
    - name: Build Swift for Linux
      # Based on https://github.com/apple/swift/blob/master/utils/build-toolchain
      # Also based on https://github.com/apple/swift/blob/master/utils/build-presets.ini
      shell: bash
      run: |
        set -x
        cd swift-source/swift
        ./utils/build-script --release \
          --install-destdir ${GITHUB_WORKSPACE}/Linux/Swift \
          --install-swift \
          --install-lldb --lldb \
          --install-llbuild --llbuild \
          --install-llvm --llvm-install-components 'IndexStore' \
          --indexstore-db \
          --install-swiftpm --swiftpm \
          --install-xctest --xctest \
          --install-libicu --libicu \
          --install-libcxx --libcxx \
          --install-foundation --foundation \
          --install-libdispatch --libdispatch
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swiftc --version
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swift --version
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swift package --version
    - name: Prepare LLVM for Android
      # Based on https://github.com/apple/swift/blob/master/docs/AndroidBuild.md#building-swift-sdk-for-android-on-windows
      # Also based on https://github.com/compnerd/swift-build/blob/master/.ci/vs2019.yml
      shell: bash
      run: |
        set -x
        mkdir swift-build
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/llvm-project/llvm \
          -B LLVM \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_HOST_TRIPLE=x86_64-unknown-linux-android
    - name: Build standard library for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift \
          -B Standard_Library \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidStandardLibrary.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_DIR=${GITHUB_WORKSPACE}/swift-build/LLVM/lib/cmake/llvm \
          -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=${GITHUB_WORKSPACE}/Linux/Swift/usr/bin \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ICU_UC_INCLUDE_DIRS=${GITHUB_WORKSPACE}/Android/ICU/include/unicode \
          -D ICU_UC_LIBRARIES=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_I18N_INCLUDE_DIRS=${GITHUB_WORKSPACE}/Android/ICU/include \
          -D ICU_I18N_LIBRARIES=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1
        cmake --build Standard_Library --target install
    - name: Build Dispatch for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-libdispatch \
          -B Dispatch \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D BUILD_TESTING=NO \
          -D ENABLE_SWIFT=YES \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES
        cmake --build Dispatch
    - name: Build zlib for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/zlib.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/madler/zlib zlib-source --branch v1.2.11 --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -G Ninja \
          -S zlib-source \
          -B zlib \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/zlib/usr \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO \
          -D CMAKE_POSITION_INDEPENDENT_CODE=YES
        cmake --build zlib --target install
    - name: Build cURL for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/curl.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/curl/curl cURL-source --branch curl-7_70_0 --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S cURL-source \
          -B cURL \
          -C ${GITHUB_WORKSPACE}/CMake/cURL.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/cURL/usr \
          -D ZLIB_ROOT=${GITHUB_WORKSPACE}/Android/zlib \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO
        cmake --build cURL --target install
    - name: Build XML 2 for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/libxml2.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/compnerd/libxml2 xml_2-source --branch cmake --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S xml_2-source \
          -B XML_2 \
          -C ${GITHUB_WORKSPACE}/CMake/XML_2.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/XML_2/usr \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO
        cmake --build XML_2 --target install
    - name: Build Foundation for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-foundation \
          -B Foundation \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ZLIB_LIBRARY=${GITHUB_WORKSPACE}/Android/zlib/usr/lib/libz.a \
          -D ZLIB_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/zlib/usr/include \
          -D CURL_LIBRARY=${GITHUB_WORKSPACE}/Android/cURL/usr/lib/libcurl.a \
          -D CURL_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/cURL/usr/include \
          -D ICU_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/ICU/include \
          -D ICU_UC_LIBRARY=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_UC_LIBRARY_RELEASE=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_I18N_LIBRARY=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1 \
          -D ICU_I18N_LIBRARY_RELEASE=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1 \
          -D LIBXML2_LIBRARY=${GITHUB_WORKSPACE}/Android/XML_2/usr/lib/libxml2.a \
          -D LIBXML2_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/XML_2/usr/include/libxml2 \
          -D dispatch_DIR=${GITHUB_WORKSPACE}/swift-build/Dispatch/cmake/modules \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES \
          -D CMAKE_HAVE_LIBC_PTHREAD=YES
        cmake --build Foundation --target install
    - name: Build XCTest for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-xctest \
          -B XCTest \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Linux/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ENABLE_TESTING=NO \
          -D Foundation_DIR=${GITHUB_WORKSPACE}/swift-build/Foundation/cmake/modules \
          -D dispatch_DIR=${GITHUB_WORKSPACE}/swift-build/Dispatch/cmake/modules \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES
        cmake --build XCTest --target install
    - name: Install Dispatch for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        cmake --build Dispatch --target install
    - name: Embed ICU
      shell: bash
      run: |
        set -x
        cp Android/ICU/lib/libicui18n.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
        cp Android/ICU/lib/libicuuc.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
        cp Android/ICU/lib/libicudata.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
    - name: Upload Android SDK
      uses: actions/upload-artifact@v1
      with:
        name: Android.sdk
        path: Android/Swift/Android.sdk
    - name: Test SDK
      shell: bash
      run: |
        cd HelloWorld
        ${GITHUB_WORKSPACE}/Linux/Swift/usr/bin/swift build \
          --build-tests --enable-test-discovery \
          --triple x86_64-unknown-linux-android \
          --sdk ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -Xswiftc -resource-dir -Xswiftc ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr/lib/swift \
          -Xswiftc -tools-directory -Xswiftc ${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin \
          -Xswiftc -Xclang-linker -Xswiftc --gcc-toolchain=${ANDROID_HOME}/ndk-bundle/toolchains/x86_64-4.9/prebuilt/linux-x86_64 \
          -Xswiftc -Xclang-linker -Xswiftc --sysroot=${ANDROID_HOME}/ndk-bundle/platforms/android-29/arch-x86_64 \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include/x86_64-linux-android \
          -Xswiftc -I -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android/x86_64 \
          -Xswiftc -L -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android
    - name: Copy libraries
      shell: bash
      run: |
        set -x
        cd HelloWorld
        cp -R ${ANDROID_HOME}/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/x86_64/* .build/x86_64-unknown-linux-android/debug
        cp -R ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr/lib/swift/android/* .build/x86_64-unknown-linux-android/debug
    - name: Upload tests
      uses: actions/upload-artifact@v1
      with:
        name: tests
        path: HelloWorld/.build/x86_64-unknown-linux-android/debug
  Android:
    runs-on: macos-10.15
    needs: Linux
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Download tests
      uses: actions/download-artifact@v1
      with:
        name: tests
        path: .build/x86_64-unknown-linux-android/debug
    - name: Prepare script
      shell: bash
      run: |
        set -x
        mkdir -p .build/SDG
        echo '
        set -e
        adb -e push . /data/local/tmp/Package
        adb -e shell chmod -R +x /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug
        adb -e shell \
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug \
          HOME=/data/local/tmp/Home \
          SWIFTPM_PACKAGE_ROOT=/data/local/tmp/Package \
          /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug/HelloWorldPackageTests.xctest
        ' > .build/SDG/Emulator.sh
        chmod +x .build/SDG/Emulator.sh
    - name: Test
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        script: .build/SDG/Emulator.sh
