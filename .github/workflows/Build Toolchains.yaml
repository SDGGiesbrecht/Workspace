
name: Build Toolchains

on: [push, pull_request]

jobs:
  ICU_Android:
    name: ICU (Android)
    runs-on: ubuntu-18.04
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Make space
      uses: ./.github/Workflow Steps/Make Space
    - name: Install Swift dependencies
      uses: ./.github/Workflow Steps/Install Swift dependencies
    - name: Fetch Android NDK
      uses: ./.github/Workflow Steps/Fetch Android NDK
    - name: Create Android C toolchain
      uses: ./.github/Workflow Steps/Create Android C Toolchain
    - name: Install ICU source
      uses: ./.github/Workflow Steps/Install ICU Source
    - name: Build ICU for Ubuntu
      uses: ./.github/Workflow Steps/Build ICU for Ubuntu
    - name: Build ICU for Android
      uses: ./.github/Workflow Steps/Build ICU for Android
    - name: Upload ICU
      uses: actions/upload-artifact@v1
      with:
        name: ICU
        path: Android/ICU
  Swift_Ubuntu:
    name: Swift (Ubuntu)
    runs-on: ubuntu-18.04
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Make space
      uses: ./.github/Workflow Steps/Make Space
    - name: Install Swift dependencies
      uses: ./.github/Workflow Steps/Install Swift dependencies
    - name: Fetch Swift source
      uses: ./.github/Workflow Steps/Fetch Swift Source
    - name: Build Swift for Ubuntu
      uses: ./.github/Workflow Steps/Build Swift for Ubuntu
    - name: Upload Swift for Ubuntu
      uses: actions/upload-artifact@v1
      with:
        name: Swift
        path: Ubuntu/Swift
  Swift_Android:
    name: Swift (Android)
    runs-on: ubuntu-18.04
    needs: ICU_Android
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Make space
      uses: ./.github/Workflow Steps/Make Space
    - name: Install Swift dependencies
      uses: ./.github/Workflow Steps/Install Swift dependencies
    - name: Fetch Android NDK
      uses: ./.github/Workflow Steps/Fetch Android NDK
    - name: Install Android NDK
      uses: ./.github/Workflow Steps/Install Android NDK
    - name: Fetch Swift source
      uses: ./.github/Workflow Steps/Fetch Swift Source
    - name: Download ICU
      uses: actions/download-artifact@v1
      with:
        name: ICU
        path: Android/ICU
    - name: Build Swift SDK for Android
      uses: ./.github/Workflow Steps/Build Swift SDK for Android
    - name: Upload Swift SDK for Android
      uses: actions/upload-artifact@v1
      with:
        name: Android.sdk
        path: Android/Swift/Android.sdk
  Swift_Android_Alternate:
    name: Swift (Android) (Alternate)
    runs-on: ubuntu-18.04
    needs: [ICU_Android, Swift_Ubuntu]
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Make space
      uses: ./.github/Workflow Steps/Make Space
    - name: Install Swift dependencies
      uses: ./.github/Workflow Steps/Install Swift dependencies
    - name: Fetch Android NDK
      uses: ./.github/Workflow Steps/Fetch Android NDK
    - name: Install Android NDK
      uses: ./.github/Workflow Steps/Install Android NDK
    - name: Download ICU
      uses: actions/download-artifact@v1
      with:
        name: ICU
        path: Android/ICU
    - name: Fetch Swift source
      uses: ./.github/Workflow Steps/Fetch Swift Source
    - name: Download Swift
      uses: actions/download-artifact@v1
      with:
        name: Swift
        path: Ubuntu/Swift
    - name: Download ICU
      uses: actions/download-artifact@v1
      with:
        name: ICU
        path: Android/ICU
    - name: Prepare LLVM for Android
      # Based on https://github.com/apple/swift/blob/master/docs/AndroidBuild.md#building-swift-sdk-for-android-on-windows
      # Also based on https://github.com/compnerd/swift-build/blob/master/.ci/vs2019.yml
      shell: bash
      run: |
        set -x
        mkdir swift-build
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/llvm-project/llvm \
          -B LLVM \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_HOST_TRIPLE=x86_64-unknown-linux-android
    - name: Build standard library for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift \
          -B Standard_Library \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidStandardLibrary.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_DIR=${GITHUB_WORKSPACE}/swift-build/LLVM/lib/cmake/llvm \
          -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr/bin \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ICU_UC_INCLUDE_DIRS=${GITHUB_WORKSPACE}/Android/ICU/include/unicode \
          -D ICU_UC_LIBRARIES=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_I18N_INCLUDE_DIRS=${GITHUB_WORKSPACE}/Android/ICU/include \
          -D ICU_I18N_LIBRARIES=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1
        cmake --build Standard_Library --target install
    - name: Build Dispatch for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-libdispatch \
          -B Dispatch \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D BUILD_TESTING=NO \
          -D ENABLE_SWIFT=YES \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES
        cmake --build Dispatch
    - name: Build zlib for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/zlib.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/madler/zlib zlib-source --branch v1.2.11 --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -G Ninja \
          -S zlib-source \
          -B zlib \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/zlib/usr \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO \
          -D CMAKE_POSITION_INDEPENDENT_CODE=YES
        cmake --build zlib --target install
    - name: Build cURL for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/curl.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/curl/curl cURL-source --branch curl-7_70_0 --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S cURL-source \
          -B cURL \
          -C ${GITHUB_WORKSPACE}/CMake/cURL.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/cURL/usr \
          -D ZLIB_ROOT=${GITHUB_WORKSPACE}/Android/zlib \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO
        cmake --build cURL --target install
    - name: Build XML 2 for Android
      # Based on https://github.com/compnerd/swift-build/blob/master/.ci/templates/libxml2.yml
      shell: bash
      run: |
        set -x
        git clone https://github.com/compnerd/libxml2 xml_2-source --branch cmake --depth 1
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S xml_2-source \
          -B XML_2 \
          -C ${GITHUB_WORKSPACE}/CMake/XML_2.cmake \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/XML_2/usr \
          -D BUILD_SHARED_LIBS=NO \
          -D BUILD_TESTING=NO
        cmake --build XML_2 --target install
    - name: Build Foundation for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-foundation \
          -B Foundation \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ZLIB_LIBRARY=${GITHUB_WORKSPACE}/Android/zlib/usr/lib/libz.a \
          -D ZLIB_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/zlib/usr/include \
          -D CURL_LIBRARY=${GITHUB_WORKSPACE}/Android/cURL/usr/lib/libcurl.a \
          -D CURL_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/cURL/usr/include \
          -D ICU_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/ICU/include \
          -D ICU_UC_LIBRARY=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_UC_LIBRARY_RELEASE=${GITHUB_WORKSPACE}/Android/ICU/lib/libicuuc.so.67.1 \
          -D ICU_I18N_LIBRARY=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1 \
          -D ICU_I18N_LIBRARY_RELEASE=${GITHUB_WORKSPACE}/Android/ICU/lib/libicui18n.so.67.1 \
          -D LIBXML2_LIBRARY=${GITHUB_WORKSPACE}/Android/XML_2/usr/lib/libxml2.a \
          -D LIBXML2_INCLUDE_DIR=${GITHUB_WORKSPACE}/Android/XML_2/usr/include/libxml2 \
          -D dispatch_DIR=${GITHUB_WORKSPACE}/swift-build/Dispatch/cmake/modules \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES \
          -D CMAKE_HAVE_LIBC_PTHREAD=YES
        cmake --build Foundation --target install
    - name: Build XCTest for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
        export ANDROID_TARGET_ARCHITECTURE=x86_64
        export ANDROID_TARGET_ABI="29"
        cmake \
          -G Ninja \
          -S ${GITHUB_WORKSPACE}/swift-source/swift-corelibs-xctest \
          -B XCTest \
          -D CMAKE_Swift_COMPILER=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr/bin/swiftc \
          -C ${GITHUB_WORKSPACE}/CMake/Android.cmake \
          -D CMAKE_Swift_SDK=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -C ${GITHUB_WORKSPACE}/CMake/AndroidSwiftFlags.cmake \
          -D ANDROID_ALTERNATE_TOOLCHAIN=${GITHUB_WORKSPACE}/Ubuntu/Swift/usr \
          -D CMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr \
          -D ENABLE_TESTING=NO \
          -D Foundation_DIR=${GITHUB_WORKSPACE}/swift-build/Foundation/cmake/modules \
          -D dispatch_DIR=${GITHUB_WORKSPACE}/swift-build/Dispatch/cmake/modules \
          -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES
        cmake --build XCTest --target install
    - name: Install Dispatch for Android
      shell: bash
      run: |
        set -x
        cd swift-build
        cmake --build Dispatch --target install
    - name: Embed ICU
      shell: bash
      run: |
        set -x
        cp Android/ICU/lib/libicui18n.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
        cp Android/ICU/lib/libicuuc.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
        cp Android/ICU/lib/libicudata.so.67 Android/Swift/Android.sdk/usr/lib/swift/android/
    - name: Upload Swift SDK for Android
      uses: actions/upload-artifact@v1
      with:
        name: Android_Alternate.sdk
        path: Android/Swift/Android.sdk
    - name: Test SDK
      shell: bash
      run: |
        cd HelloWorld
        ${GITHUB_WORKSPACE}/Ubuntu/Swift/usr/bin/swift build \
          --build-tests --enable-test-discovery \
          --triple x86_64-unknown-linux-android \
          --sdk ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk \
          -Xswiftc -resource-dir -Xswiftc ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr/lib/swift \
          -Xswiftc -tools-directory -Xswiftc ${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin \
          -Xswiftc -Xclang-linker -Xswiftc --gcc-toolchain=${ANDROID_HOME}/ndk-bundle/toolchains/x86_64-4.9/prebuilt/linux-x86_64 \
          -Xswiftc -Xclang-linker -Xswiftc --sysroot=${ANDROID_HOME}/ndk-bundle/platforms/android-29/arch-x86_64 \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include \
          -Xcc -I${ANDROID_HOME}/ndk-bundle/sysroot/usr/include/x86_64-linux-android \
          -Xswiftc -I -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android/x86_64 \
          -Xswiftc -L -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr/lib/swift/android
    - name: Copy libraries
      shell: bash
      run: |
        set -x
        cd HelloWorld
        cp -R ${ANDROID_HOME}/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/x86_64/* .build/x86_64-unknown-linux-android/debug
        cp -R ${GITHUB_WORKSPACE}/Android/Swift/Android.sdk/usr/lib/swift/android/* .build/x86_64-unknown-linux-android/debug
    - name: Upload tests
      uses: actions/upload-artifact@v1
      with:
        name: tests
        path: HelloWorld/.build/x86_64-unknown-linux-android/debug
  Android:
    runs-on: macos-10.15
    needs: Swift_Android_Alternate
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Download tests
      uses: actions/download-artifact@v1
      with:
        name: tests
        path: .build/x86_64-unknown-linux-android/debug
    - name: Prepare script
      shell: bash
      run: |
        set -x
        mkdir -p .build/SDG
        echo '
        set -e
        adb -e push . /data/local/tmp/Package
        adb -e shell chmod -R +x /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug
        adb -e shell \
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug \
          HOME=/data/local/tmp/Home \
          SWIFTPM_PACKAGE_ROOT=/data/local/tmp/Package \
          /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug/HelloWorldPackageTests.xctest
        ' > .build/SDG/Emulator.sh
        chmod +x .build/SDG/Emulator.sh
    - name: Test
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        script: .build/SDG/Emulator.sh
