/*
 Resources.swift

 This source file is part of the Workspace open source project.
 https://github.com/SDGGiesbrecht/Workspace#workspace

 Copyright Â©2017 Jeremy David Giesbrecht and the Workspace project contributors.

 Soli Deo gloria.

 Licensed under the Apache Licence, Version 2.0.
 See http://www.apache.org/licenses/LICENSE-2.0 for licence information.
 */

import Foundation

internal enum Resources {}

extension Resources {
    enum Licences {
        static let Apache_2_0_txt = Data(base64Encoded: "")
        static let Copyright_txt = Data(base64Encoded: "Q29weXJpZ2h0IFtfQ29weXJpZ2h0X10gW19BdXRob3JzX10uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgoqKlRoaXMgc29mdHdhcmUgaXMgc3ViamVjdCB0byBjb3B5cmlnaHQgbGF3LiBJdCBtYXkgbm90IGJlIHVzZWQsIGNvcGllZCwgZGlzdHJpYnV0ZWQgb3IgbW9kaWZpZWQgd2l0aG91dCBmaXJzdCBvYnRhaW5pbmcgYSBwcml2YXRlIGxpY2VuY2UgZnJvbSB0aGUgY29weXJpZ2h0IGhvbGRlcihzKS4qKgo=")
        static let GNU_General_Public_3_0_txt = Data(base64Encoded: "")
        static let MIT_txt = Data(base64Encoded: "IyBNSVQgTGljZW5zZQoKQ29weXJpZ2h0IFtfQ29weXJpZ2h0X10gW19BdXRob3JzX10KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUg4oCcU29mdHdhcmXigJ0pLCB0byBkZWFsCmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbApjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKKipUaGUgU29mdHdhcmUgaXMgcHJvdmlkZWQg4oCcYXMgaXPigJ0sIHdpdGhvdXQgd2FycmFudHkgb2YgYW55IGtpbmQsIGV4cHJlc3Mgb3IKaW1wbGllZCwgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byB0aGUgd2FycmFudGllcyBvZiBtZXJjaGFudGFiaWxpdHksCmZpdG5lc3MgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlIGFuZCBub25pbmZyaW5nZW1lbnQuIEluIG5vIGV2ZW50IHNoYWxsIHRoZQphdXRob3JzIG9yIGNvcHlyaWdodCBob2xkZXJzIGJlIGxpYWJsZSBmb3IgYW55IGNsYWltLCBkYW1hZ2VzIG9yIG90aGVyCmxpYWJpbGl0eSwgd2hldGhlciBpbiBhbiBhY3Rpb24gb2YgY29udHJhY3QsIHRvcnQgb3Igb3RoZXJ3aXNlLCBhcmlzaW5nIGZyb20sCm91dCBvZiBvciBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHNvZnR3YXJlIG9yIHRoZSB1c2Ugb3Igb3RoZXIgZGVhbGluZ3MgaW4gdGhlCnNvZnR3YXJlLioqCg==")
        static let Unlicense_txt = Data(base64Encoded: "VGhpcyBpcyBmcmVlIGFuZCB1bmVuY3VtYmVyZWQgc29mdHdhcmUgcmVsZWFzZWQgaW50byB0aGUgcHVibGljIGRvbWFpbi4KCkFueW9uZSBpcyBmcmVlIHRvIGNvcHksIG1vZGlmeSwgcHVibGlzaCwgdXNlLCBjb21waWxlLCBzZWxsLCBvcgpkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUsIGVpdGhlciBpbiBzb3VyY2UgY29kZSBmb3JtIG9yIGFzIGEgY29tcGlsZWQKYmluYXJ5LCBmb3IgYW55IHB1cnBvc2UsIGNvbW1lcmNpYWwgb3Igbm9u4oCQY29tbWVyY2lhbCwgYW5kIGJ5IGFueQptZWFucy4KCkluIGp1cmlzZGljdGlvbnMgdGhhdCByZWNvZ25pemUgY29weXJpZ2h0IGxhd3MsIHRoZSBhdXRob3Igb3IgYXV0aG9ycwpvZiB0aGlzIHNvZnR3YXJlIGRlZGljYXRlIGFueSBhbmQgYWxsIGNvcHlyaWdodCBpbnRlcmVzdCBpbiB0aGUKc29mdHdhcmUgdG8gdGhlIHB1YmxpYyBkb21haW4uIFdlIG1ha2UgdGhpcyBkZWRpY2F0aW9uIGZvciB0aGUgYmVuZWZpdApvZiB0aGUgcHVibGljIGF0IGxhcmdlIGFuZCB0byB0aGUgZGV0cmltZW50IG9mIG91ciBoZWlycyBhbmQKc3VjY2Vzc29ycy4gV2UgaW50ZW5kIHRoaXMgZGVkaWNhdGlvbiB0byBiZSBhbiBvdmVydCBhY3Qgb2YKcmVsaW5xdWlzaG1lbnQgaW4gcGVycGV0dWl0eSBvZiBhbGwgcHJlc2VudCBhbmQgZnV0dXJlIHJpZ2h0cyB0byB0aGlzCnNvZnR3YXJlIHVuZGVyIGNvcHlyaWdodCBsYXcuCgoqKlRoZSBzb2Z0d2FyZSBpcyBwcm92aWRlZCDigJxhcyBpc+KAnSwgd2l0aG91dCB3YXJyYW50eSBvZiBhbnkga2luZCwKZXhwcmVzcyBvciBpbXBsaWVkLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIHRoZSB3YXJyYW50aWVzIG9mCm1lcmNoYW50YWJpbGl0eSwgZml0bmVzcyBmb3IgYSBwYXJ0aWN1bGFyIHB1cnBvc2UgYW5kIG5vbmluZnJpbmdlbWVudC4KSW4gbm8gZXZlbnQgc2hhbGwgdGhlIGF1dGhvcnMgYmUgbGlhYmxlIGZvciBhbnkgY2xhaW0sIGRhbWFnZXMgb3IKb3RoZXIgbGlhYmlsaXR5LCB3aGV0aGVyIGluIGFuIGFjdGlvbiBvZiBjb250cmFjdCwgdG9ydCBvciBvdGhlcndpc2UsCmFyaXNpbmcgZnJvbSwgb3V0IG9mIG9yIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgc29mdHdhcmUgb3IgdGhlIHVzZSBvcgpvdGhlciBkZWFsaW5ncyBpbiB0aGUgc29mdHdhcmUuKioKCkZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2UgcmVmZXIgdG8gW2h0dHA6Ly91bmxpY2Vuc2Uub3JnL10oaHR0cDovL3VubGljZW5zZS5vcmcvKQo=")
    }
    enum Scripts {
        static let Refresh_Workspace__Linux__sh = Data(base64Encoded: "IyEvYmluL2Jhc2gKCiMgUmVmcmVzaCBXb3Jrc3BhY2UgKExpbnV4KS5zaAojCiMgVGhpcyBzb3VyY2UgZmlsZSBpcyBwYXJ0IG9mIHRoZSBXb3Jrc3BhY2Ugb3BlbiBzb3VyY2UgcHJvamVjdC4KIyBodHRwczovL2dpdGh1Yi5jb20vU0RHR2llc2JyZWNodC9Xb3Jrc3BhY2Ujd29ya3NwYWNlCiMKIyBDb3B5cmlnaHQgwqkyMDE3IEplcmVteSBEYXZpZCBHaWVzYnJlY2h0IGFuZCB0aGUgV29ya3NwYWNlIHByb2plY3QgY29udHJpYnV0b3JzLgojCiMgU29saSBEZW8gZ2xvcmlhLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbmNlLCBWZXJzaW9uIDIuMC4KIyBTZWUgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wIGZvciBsaWNlbmNlIGluZm9ybWF0aW9uLgoKIyAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhCiMgVGhpcyBmaWxlIGlzIG1hbmFnZWQgYnkgV29ya3NwYWNlLgojIE1hbnVhbCBjaGFuZ2VzIHdpbGwgbm90IHBlcnNpc3QuCiMgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZToKIyBodHRwczovL2dpdGh1Yi5jb20vU0RHR2llc2JyZWNodC9Xb3Jrc3BhY2UKIyAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhCgojIFN0b3AgaWYgYSBjb21tYW5kIGZhaWxzLgpzZXQgLWUKCiMgRmluZCBhbmQgZW50ZXIgcmVwb3NpdG9yeS4KY2QgIiR7MCUvKn0iCgojIFJ1biByZWZyZXNoIGluIHRlcm1pbmFsLgpnbm9tZS10ZXJtaW5hbCAtZSAiYmFzaCAtLWxvZ2luIC1jIFwic291cmNlIH4vLmJhc2hyYzsgLi9SZWZyZXNoXCBXb3Jrc3BhY2VcIFwobWFjT1NcKS5jb21tYW5kOyBleGVjIGJhc2hcIiIK")
        static let Refresh_Workspace__macOS__command = Data(base64Encoded: "IyEvYmluL2Jhc2gKCiMgUmVmcmVzaCBXb3Jrc3BhY2UgKG1hY09TKS5jb21tYW5kCiMKIyBUaGlzIHNvdXJjZSBmaWxlIGlzIHBhcnQgb2YgdGhlIFdvcmtzcGFjZSBvcGVuIHNvdXJjZSBwcm9qZWN0LgojIGh0dHBzOi8vZ2l0aHViLmNvbS9TREdHaWVzYnJlY2h0L1dvcmtzcGFjZSN3b3Jrc3BhY2UKIwojIENvcHlyaWdodCDCqTIwMTcgSmVyZW15IERhdmlkIEdpZXNicmVjaHQgYW5kIHRoZSBXb3Jrc3BhY2UgcHJvamVjdCBjb250cmlidXRvcnMuCiMKIyBTb2xpIERlbyBnbG9yaWEuCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2VuY2UsIFZlcnNpb24gMi4wLgojIFNlZSBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgZm9yIGxpY2VuY2UgaW5mb3JtYXRpb24uCgojICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEKIyBUaGlzIGZpbGUgaXMgbWFuYWdlZCBieSBXb3Jrc3BhY2UuCiMgTWFudWFsIGNoYW5nZXMgd2lsbCBub3QgcGVyc2lzdC4KIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOgojIGh0dHBzOi8vZ2l0aHViLmNvbS9TREdHaWVzYnJlY2h0L1dvcmtzcGFjZQojICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEKCiMgU3RvcCBpZiBhIGNvbW1hbmQgZmFpbHMuCnNldCAtZQoKIyBGaW5kIHJlcG9zaXRvcnkuCgojIFJFUE9TSVRPUlk9IiQocHdkKSIKIyBEb2VzIG5vdCB3b3JrIGZvciBkb3VibGXigJBjbGljayBvbiBtYWNPUywgb3IgYXMgYSBjb21tYW5kIG9uIG1hY09TIG9yIExpbnV4IGZyb20gYSBkaWZmZXJlbnQgZGlyZWN0b3J5LgoKIyBSRVBPU0lUT1JZPSIkezAlLyp9IgojIERvZXMgbm90IHdvcmsgZm9yIGRvdWJsZeKAkGNsaWNrIG9uIExpbnV4IG9yIGFzIGEgY29tbWFuZCBvbiBtYWNPUyBvciBMaW51eCBmcm9tIGEgZGlmZmVyZW50IGRpcmVjdG9yeS4KClJFUE9TSVRPUlk9IiQoIGNkICIkKCBkaXJuYW1lICIke0JBU0hfU09VUkNFWzBdfSIgKSIgJiYgcHdkICkiCgojIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAogojIFVwZGF0ZSBXb3Jrc3BhY2UKIyDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIKCiMgR2V0IFdvcmtzcGFjZSBpZiBuZWNlc3NhcnkuCldPUktTUEFDRT0iJEhPTUUvLldvcmtzcGFjZS9Xb3Jrc3BhY2UiCmlmIFsgISAtZCAiJHtXT1JLU1BBQ0V9L1NvdXJjZXMiIF07IHRoZW4KCiAgICAjIFRoZSBmb2xsb3dpbmcgY2hhbmdlcyBmb3IgdGVzdGluZyBjb250aW51b3VzIGludGVncmF0aW9uIGJlaGF2aW91ciBtdXN0IGJlIG1hZGUgYWZ0ZXIgVmFsaWRhdGUgQ2hhbmdlcywgYnV0IGJlZm9yZSBjb21taXR0aW5nLgogICAgIyBUcmF2aXMgQ0nigJlzIGNhY2hlIG11c3QgYWxzbyBiZSBkZWxldGVkLiAoVGhlIGNhY2hlIG11c3QgYmUgZGVsZXRlZCBhZ2FpbiBhZnRlcndhcmQgaW4gb3JkZXIgdG8gcmV2ZXJ0IHRvIG5vcm1hbCBiZWhhdmlvdXIuKQoKICAgICMgVG8gdGVzdCBhIGZvcmsgb2YgV29ya3NwYWNlLCByZXBsYWNlIHRoZSBVUkwgb24gdGhlIG5leHQgbGluZSB3aXRoIHRoYXQgb2YgdGhlIGZvcmsuCiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL1NER0dpZXNicmVjaHQvV29ya3NwYWNlICIke1dPUktTUEFDRX0iCgogICAgIyBUbyB0ZXN0IGEgZGV2ZWxvcG1lbnQgYnJhbmNoIG9mIFdvcmtzcGFjZSwgY2hhbmdlIHRoaXMgdG8gYSByZWFsIGJyYW5jaCBuYW1lLgogICAgQlJBTkNIPSJicmFuY2gtbmFtZSIKCiAgICBpZiBbICIkQlJBTkNIIiAhPSAiYnJhbmNoLW5hbWUiIF07IHRoZW4KICAgICAgICBjZCAiJHtXT1JLU1BBQ0V9IgogICAgICAgIGdpdCBjaGVja291dCAtYiAiJHtCUkFOQ0h9IiAib3JpZ2luLyR7QlJBTkNIfSIKICAgIGZpCmZpCgojIFVwZGF0ZSBXb3Jrc3BhY2UuCmNkICIke1dPUktTUEFDRX0iCmdpdCBwdWxsCmlmIHN3aWZ0IGJ1aWxkIC0tY29uZmlndXJhdGlvbiByZWxlYXNlOyB0aGVuCiAgICA6CmVsc2UKICAgIHN3aWZ0IHBhY2thZ2UgdXBkYXRlCiAgICBzd2lmdCBidWlsZCAtLWNvbmZpZ3VyYXRpb24gcmVsZWFzZQpmaQoKIyDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIKIyBSdW4gV29ya3NwYWNlIGNvbW1hbmQKIyDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIKCiMgRW50ZXIgcmVwb3NpdG9yeS4KY2QgIiR7UkVQT1NJVE9SWX0iCgojIFJ1bi4Kfi8uV29ya3NwYWNlL1dvcmtzcGFjZS8uYnVpbGQvcmVsZWFzZS93b3Jrc3BhY2UgcmVmcmVzaAo=")
        static let Validate_Changes__Linux__sh = Data(base64Encoded: "IyEvYmluL2Jhc2gKCiMgVmFsaWRhdGUgQ2hhbmdlcyAoTGludXgpLnNoCiMKIyBUaGlzIHNvdXJjZSBmaWxlIGlzIHBhcnQgb2YgdGhlIFdvcmtzcGFjZSBvcGVuIHNvdXJjZSBwcm9qZWN0LgojIGh0dHBzOi8vZ2l0aHViLmNvbS9TREdHaWVzYnJlY2h0L1dvcmtzcGFjZSN3b3Jrc3BhY2UKIwojIENvcHlyaWdodCDCqTIwMTcgSmVyZW15IERhdmlkIEdpZXNicmVjaHQgYW5kIHRoZSBXb3Jrc3BhY2UgcHJvamVjdCBjb250cmlidXRvcnMuCiMKIyBTb2xpIERlbyBnbG9yaWEuCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2VuY2UsIFZlcnNpb24gMi4wLgojIFNlZSBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgZm9yIGxpY2VuY2UgaW5mb3JtYXRpb24uCgojICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEKIyBUaGlzIGZpbGUgaXMgbWFuYWdlZCBieSBXb3Jrc3BhY2UuCiMgTWFudWFsIGNoYW5nZXMgd2lsbCBub3QgcGVyc2lzdC4KIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOgojIGh0dHBzOi8vZ2l0aHViLmNvbS9TREdHaWVzYnJlY2h0L1dvcmtzcGFjZQojICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEKCiMgU3RvcCBpZiBhIGNvbW1hbmQgZmFpbHMuCnNldCAtZQoKIyBGaW5kIGFuZCBlbnRlciByZXBvc2l0b3J5LgpjZCAiJHswJS8qfSIKCiMgUnVuIHJlZnJlc2ggaW4gdGVybWluYWwuCmdub21lLXRlcm1pbmFsIC1lICJiYXNoIC0tbG9naW4gLWMgXCJzb3VyY2Ugfi8uYmFzaHJjOyAuL1ZhbGlkYXRlXCBDaGFuZ2VzXCBcKG1hY09TXCkuY29tbWFuZDsgZXhlYyBiYXNoXCIiCg==")
        static let Validate_Changes__macOS__command = Data(base64Encoded: "IyEvYmluL2Jhc2gKCiMgVmFsaWRhdGUgQ2hhbmdlcyAobWFjT1MpLmNvbW1hbmQKIwojIFRoaXMgc291cmNlIGZpbGUgaXMgcGFydCBvZiB0aGUgV29ya3NwYWNlIG9wZW4gc291cmNlIHByb2plY3QuCiMgaHR0cHM6Ly9naXRodWIuY29tL1NER0dpZXNicmVjaHQvV29ya3NwYWNlI3dvcmtzcGFjZQojCiMgQ29weXJpZ2h0IMKpMjAxNyBKZXJlbXkgRGF2aWQgR2llc2JyZWNodCBhbmQgdGhlIFdvcmtzcGFjZSBwcm9qZWN0IGNvbnRyaWJ1dG9ycy4KIwojIFNvbGkgRGVvIGdsb3JpYS4KIwojIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5jZSwgVmVyc2lvbiAyLjAuCiMgU2VlIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMCBmb3IgbGljZW5jZSBpbmZvcm1hdGlvbi4KCiMgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhIQojIFRoaXMgZmlsZSBpcyBtYW5hZ2VkIGJ5IFdvcmtzcGFjZS4KIyBNYW51YWwgY2hhbmdlcyB3aWxsIG5vdCBwZXJzaXN0LgojIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6CiMgaHR0cHM6Ly9naXRodWIuY29tL1NER0dpZXNicmVjaHQvV29ya3NwYWNlCiMgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhISAhISEhISEhICEhISEhISEgISEhISEhIQoKIyBTdG9wIGlmIGEgY29tbWFuZCBmYWlscy4Kc2V0IC1lCgojIEZpbmQgcmVwb3NpdG9yeS4KCiMgUkVQT1NJVE9SWT0iJChwd2QpIgojIERvZXMgbm90IHdvcmsgZm9yIGRvdWJsZeKAkGNsaWNrIG9uIG1hY09TLCBvciBhcyBhIGNvbW1hbmQgb24gbWFjT1Mgb3IgTGludXggZnJvbSBhIGRpZmZlcmVudCBkaXJlY3RvcnkuCgojIFJFUE9TSVRPUlk9IiR7MCUvKn0iCiMgRG9lcyBub3Qgd29yayBmb3IgZG91Ymxl4oCQY2xpY2sgb24gTGludXggb3IgYXMgYSBjb21tYW5kIG9uIG1hY09TIG9yIExpbnV4IGZyb20gYSBkaWZmZXJlbnQgZGlyZWN0b3J5LgoKUkVQT1NJVE9SWT0iJCggY2QgIiQoIGRpcm5hbWUgIiR7QkFTSF9TT1VSQ0VbMF19IiApIiAmJiBwd2QgKSIKCiMg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiCiMgVXBkYXRlIFdvcmtzcGFjZQojIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAogoKIyBHZXQgV29ya3NwYWNlIGlmIG5lY2Vzc2FyeS4KV09SS1NQQUNFPSIkSE9NRS8uV29ya3NwYWNlL1dvcmtzcGFjZSIKaWYgWyAhIC1kICIke1dPUktTUEFDRX0vU291cmNlcyIgXTsgdGhlbgogICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9TREdHaWVzYnJlY2h0L1dvcmtzcGFjZSAiJHtXT1JLU1BBQ0V9IgpmaQoKIyBVcGRhdGUgV29ya3NwYWNlLgpjZCAiJHtXT1JLU1BBQ0V9IgpnaXQgcHVsbAppZiBzd2lmdCBidWlsZCAtLWNvbmZpZ3VyYXRpb24gcmVsZWFzZTsgdGhlbgogICAgOgplbHNlCiAgICBzd2lmdCBwYWNrYWdlIHVwZGF0ZQogICAgc3dpZnQgYnVpbGQgLS1jb25maWd1cmF0aW9uIHJlbGVhc2UKZmkKCiMg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiCiMgUnVuIFdvcmtzcGFjZSBjb21tYW5kCiMg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiIOKAouKAouKAouKAouKAouKAouKAoiDigKLigKLigKLigKLigKLigKLigKIg4oCi4oCi4oCi4oCi4oCi4oCi4oCiCgojIEVudGVyIHJlcG9zaXRvcnkuCmNkICIke1JFUE9TSVRPUll9IgoKIyBSdW4uCn4vLldvcmtzcGFjZS9Xb3Jrc3BhY2UvLmJ1aWxkL3JlbGVhc2Uvd29ya3NwYWNlIHZhbGlkYXRlCg==")
    }

}
