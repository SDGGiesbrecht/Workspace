import Foundation

internal enum Resources {}
internal typealias Ressourcen = Resources

extension Resources {
  static let deutsch = String(
    data: Data(
      base64Encoded:
        ""
    )!,
    encoding: String.Encoding.utf8
  )!
  static let english = String(
    data: Data(
      base64Encoded:
        ""
    )!,
    encoding: String.Encoding.utf8
  )!

}
