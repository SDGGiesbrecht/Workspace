

import Foundation

internal enum Resources {}

extension Resources {
    static let english = String(data: Data(base64Encoded: "")!, encoding: String.Encoding.utf8)!

}
