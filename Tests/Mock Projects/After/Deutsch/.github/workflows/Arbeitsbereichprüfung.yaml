

name: ArbeitsbereichpruÃàfung

on: [push, pull_request]

jobs:
  macOS:
    name: macOS
    runs-on: macos-10.15
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: macOS‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Xcode einrichten
      shell: bash
      run: |
        set -x
        sudo xcode-select -switch /Applications/Xcode_12.app
        xcodebuild -version
        swift --version
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job macos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job macos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job macos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
  Windows:
    name: Windows
    runs-on: windows-2019
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Windows‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Visual Studio einrichten
      shell: bash
      run: |
        set -x
        cd '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build'
        echo 'export -p > exported_environment.sh' > nested_bash.sh
        echo 'vcvarsall.bat x64 && "C:/Program Files/Git/usr/bin/bash" -c ./nested_bash.sh' > export_environment.bat
        cmd "/c export_environment.bat"
        set +x
        source ./exported_environment.sh
        set -x
        echo "::set-env name=PATH::${PATH}"
        echo "::set-env name=UniversalCRTSdkDir::${UniversalCRTSdkDir}"
        echo "::set-env name=UCRTVersion::${UCRTVersion}"
        echo "::set-env name=VCToolsInstallDir::${VCToolsInstallDir}"
    - name: Swift installieren
      shell: bash
      run: |
        set -x
        curl --location \
          'https://github.com/compnerd/swift-build/releases/download/v5.3/installer.exe' \
          --output '/tmp/installer.exe'
        /tmp/installer.exe //passive
        cp "/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/share/ucrt.modulemap" "${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt/module.modulemap"
        cp "/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/share/visualc.modulemap" "${VCToolsInstallDir}/include/module.modulemap"
        cp "/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/share/visualc.apinotes" "${VCToolsInstallDir}/include/visualc.apinotes"
        cp "/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/share/winsdk.modulemap" "${UniversalCRTSdkDir}/Include/${UCRTVersion}/um/module.modulemap"
        export PATH="/c/Library/icu-67/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        export PATH="/c/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        export PATH="/c/Library/Swift-development/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        export PATH="/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        swift --version
    - name: Linux installieren
      shell: bash
      run: |
        set -x
        mkdir -p .build/SDG/tmp
        curl --location \
          'https://aka.ms/wsl-ubuntu-1804' \
          --output '.build/SDG/tmp/wsl-ubuntu-1804'
        7z x .build/SDG/tmp/wsl-ubuntu-1804 -o.build/SDG/Linux/Ubuntu
        export PATH="$(pwd)/.build/SDG/Linux/Ubuntu:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        ubuntu1804 install --root
    - name: SwiftPM‚ÄêAbhaÃàngigkeiten installieren
      shell: bash
      run: |
        set -x
        ubuntu1804 run \
          apt-get update --assume-yes
        ubuntu1804 run \
          UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
          apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
            install --assume-yes \
              binutils \
              clang-9 \
              git \
              libc6-dev \
              libcurl4 \
              libedit2 \
              libgcc-5-dev \
              libpython2.7 \
              libsqlite3-0 \
              libstdc++-5-dev \
              libxml2 \
              lld-6.0 \
              pkg-config \
              tzdata \
              zlib1g-dev
        ubuntu1804 run \
          ln -s //usr/bin/lld-link-6.0 //usr/bin/lld-link
    - name: SwiftPM installieren
      shell: bash
      run: |
        set -x
        ubuntu1804 run \
          mkdir -p /tmp
        ubuntu1804 run \
          curl --location \
            'https://swift.org/builds/swift-5.3-release/ubuntu1804/swift-5.3-RELEASE/swift-5.3-RELEASE-ubuntu18.04.tar.gz' \
            --output '/tmp/swift-5.3-RELEASE-ubuntu18.04.tar.gz'
        ubuntu1804 run \
          tar --extract --force-local --file /tmp/swift-5.3-RELEASE-ubuntu18.04.tar.gz --directory /tmp
        ubuntu1804 run \
          mkdir -p /
        ubuntu1804 run \
          cp -R /tmp/swift-5.3-RELEASE-ubuntu18.04/usr //
        ubuntu1804 run \
          ln -fs //usr/bin/clang-9 //usr/bin/clang
        ubuntu1804 run \
          swift --version
    - name: Erstellen
      shell: bash
      run: |
        set -x
        export WSLENV=UniversalCRTSdkDir/p:UCRTVersion:VCToolsInstallDir/p
        ubuntu1804 run \
          TARGETING_WINDOWS='true' \
          swift build --destination .github/workflows/Windows/SDK.json \
            --configuration release -Xswiftc -enable-testing \
            -Xswiftc -use-ld=lld \
            -Xswiftc -sdk -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk \
            -Xswiftc -resource-dir -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows/x86_64 \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt"' \
            -Xswiftc -L -Xswiftc '"/${UniversalCRTSdkDir}/lib/${UCRTVersion}/ucrt/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${VCToolsInstallDir}/include"' \
            -Xcc -isystem -Xcc '"/${VCToolsInstallDir}/include"' \
            -Xswiftc -L -Xswiftc '"/${VCToolsInstallDir}/lib/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/um"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/um"' \
            -Xswiftc -L -Xswiftc '"/${UniversalCRTSdkDir}/lib/${UCRTVersion}/um/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/shared"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/shared"' \
            -Xswiftc -I -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/lib/swift/windows/x86_64 \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/lib/swift/windows
    - name: Testen
      shell: bash
      run: |
        set -x
        export PATH=$(echo -n $PATH | awk -v RS=: -v ORS=: '!($0 in a) {a[$0]; print $0}')
        .build/x86_64-unknown-windows-msvc/release/WindowsTests.exe
  Netz:
    name: Netz
    runs-on: macos-10.15
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Web‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Swift installieren
      shell: bash
      run: |
        set -x
        curl --location \
          'https://github.com/swiftwasm/swift/releases/download/swift-wasm-5.3-SNAPSHOT-2020-09-13-a/swift-wasm-5.3-SNAPSHOT-2020-09-13-a-osx.tar.gz' \
          --output '/tmp/swift-wasm-5.3-SNAPSHOT-2020-09-13-a-osx.tar.gz'
        tar --extract --file /tmp/swift-wasm-5.3-SNAPSHOT-2020-09-13-a-osx.tar.gz --directory /tmp
        mkdir -p .build/SDG/Swift
        cp -R /tmp/swift-wasm-5.3-SNAPSHOT-2020-09-13-a/* .build/SDG/Swift
        .build/SDG/Swift/usr/bin/swift --version
    - name: Erstellen
      shell: bash
      run: |
        set -x
        export TARGETING_WEB=true
        .build/SDG/Swift/usr/bin/swift build --triple wasm32-unknown-wasi
  CentOS:
    name: CentOS
    runs-on: ubuntu-20.04
    container: swift:5.3-centos8
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: CentOS‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: SwiftPM‚ÄêAbhaÃàngigkeiten installieren
      shell: bash
      run: |
        set -x
        yum install --assumeyes \
          ncurses-devel \
          sqlite-devel
    - name: AbhaÃàngigkeiten von Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        yum install --assumeyes \
          curl
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job centos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job centos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job centos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Zugriffsrechte zum Zwischenspeichern erteilen
      shell: bash
      run: |
        set -x
        chmod -R a+rwx .
  Ubuntu:
    name: Ubuntu
    runs-on: ubuntu-20.04
    container: swift:5.3-focal
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Ubuntu‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: SwiftPM‚ÄêAbhaÃàngigkeiten installieren
      shell: bash
      run: |
        set -x
        apt-get update --assume-yes
        UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
        apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
          install --assume-yes \
            libncurses-dev \
            libsqlite3-dev
    - name: AbhaÃàngigkeiten von Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        apt-get update --assume-yes
        UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
        apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
          install --assume-yes \
            curl
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job ubuntu ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job ubuntu ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job ubuntu ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Zugriffsrechte zum Zwischenspeichern erteilen
      shell: bash
      run: |
        set -x
        chmod -R a+rwx .
  tvOS:
    name: tvOS
    runs-on: macos-10.15
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: macOS‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Xcode einrichten
      shell: bash
      run: |
        set -x
        sudo xcode-select -switch /Applications/Xcode_12.app
        xcodebuild -version
        swift --version
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job tvos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job tvos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job tvos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
  iOS:
    name: iOS
    runs-on: macos-10.15
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: macOS‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Xcode einrichten
      shell: bash
      run: |
        set -x
        sudo xcode-select -switch /Applications/Xcode_12.app
        xcodebuild -version
        swift --version
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job ios ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job ios ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job ios ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
  Android:
    name: Android
    runs-on: ubuntu-20.04
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Android‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Swift installieren
      shell: bash
      run: |
        set -x
        curl --location \
          'https://swift.org/builds/swift-5.3-release/ubuntu2004/swift-5.3-RELEASE/swift-5.3-RELEASE-ubuntu20.04.tar.gz' \
          --output '/tmp/swift-5.3-RELEASE-ubuntu20.04.tar.gz'
        tar --extract --file /tmp/swift-5.3-RELEASE-ubuntu20.04.tar.gz --directory /tmp
        sudo mkdir -p /
        sudo cp -R /tmp/swift-5.3-RELEASE-ubuntu20.04/* /
        export PATH="/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        swift --version
    - name: Android‚ÄêEntwicklungsausruÃàstung holen
      shell: bash
      run: |
        set -x
        curl --location \
          'https://github.com/SDGGiesbrecht/Workspace/releases/download/experimental%E2%80%90swift%E2%80%905.3/Android.sdk.zip' \
          --output '/tmp/Android.sdk.zip'
        unzip /tmp/Android.sdk.zip -d /tmp
        sudo mkdir -p /Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk
        sudo cp -R /tmp/Android.sdk/* /Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk
        sudo chmod -R a+rwx /Library
    - name: Erstellen
      shell: bash
      run: |
        set -x
        export TARGETING_ANDROID=true
        export CC=${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
        swift build --destination .github/workflows/Android/SDK.json \
          --build-tests --enable-test-discovery \
          -Xswiftc -resource-dir -Xswiftc /Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk/usr/lib/swift \
          -Xcc --sysroot=${ANDROID_HOME}/ndk-bundle/sysroot \
          -Xswiftc -tools-directory -Xswiftc ${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin \
          -Xswiftc -Xclang-linker -Xswiftc --gcc-toolchain=${ANDROID_HOME}/ndk-bundle/toolchains/x86_64-4.9/prebuilt/linux-x86_64 \
          -Xswiftc -Xclang-linker -Xswiftc --sysroot=${ANDROID_HOME}/ndk-bundle/platforms/android-29/arch-x86_64 \
    - name: Bibliotheken kopieren
      shell: bash
      run: |
        set -x
        mkdir -p .build/x86_64-unknown-linux-android/debug
        cp -R ${ANDROID_HOME}/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/x86_64/* .build/x86_64-unknown-linux-android/debug
        mkdir -p .build/x86_64-unknown-linux-android/debug
        cp -R /Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk/usr/lib/swift/android/* .build/x86_64-unknown-linux-android/debug
    - name: Teste hochladen
      uses: actions/upload-artifact@v1
      with:
        name: tests
        path: .build/x86_64-unknown-linux-android/debug
  Android_II:
    name: Android II
    runs-on: macos-10.15
    needs: Android
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Teste herunterladen
      uses: actions/download-artifact@v1
      with:
        name: tests
        path: .build/x86_64-unknown-linux-android/debug
    - name: Skript vorbereiten
      shell: bash
      run: |
        set -x
        mkdir -p .build/SDG
        echo '
        set -e
        adb -e push . /data/local/tmp/Package
        adb -e shell chmod -R +x /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug
        adb -e shell \
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug \
          HOME=/data/local/tmp/Home \
          SWIFTPM_PACKAGE_ROOT=/data/local/tmp/Package \
          /data/local/tmp/Package/.build/x86_64-unknown-linux-android/debug/DeutschPackageTests.xctest
        ' > .build/SDG/Emulator.sh
        chmod +x .build/SDG/Emulator.sh
    - name: Testen
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        script: .build/SDG/Emulator.sh
  Amazon_Linux:
    name: Amazon Linux
    runs-on: ubuntu-20.04
    container: swift:5.3-amazonlinux2
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Amazon‚ÄêLinux‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: SwiftPM‚ÄêAbhaÃàngigkeiten installieren
      shell: bash
      run: |
        set -x
        yum install --assumeyes \
          ncurses-devel \
          sqlite-devel
    - name: AbhaÃàngigkeiten von Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        yum install --assumeyes \
          curl
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job amazon‚Äêlinux ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job amazon‚Äêlinux ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job amazon‚Äêlinux ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Zugriffsrechte zum Zwischenspeichern erteilen
      shell: bash
      run: |
        set -x
        chmod -R a+rwx .
  watchOS:
    name: watchOS
    runs-on: macos-10.15
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: macOS‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: Xcode einrichten
      shell: bash
      run: |
        set -x
        sudo xcode-select -switch /Applications/Xcode_12.app
        xcodebuild -version
        swift --version
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job watchos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job watchos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job watchos ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
  Sonstiges:
    name: Sonstiges
    runs-on: ubuntu-20.04
    container: swift:5.3-focal
    steps:
    - name: Holen
      uses: actions/checkout@v1
    - name: Arbeitsbereich zwischenspeichern
      uses: actions/cache@v1
      with:
        key: Ubuntu‚Äê${{ hashFiles('.github/workflows/**') }}
        path: .build/SDG/Workspace
    - name: SwiftPM‚ÄêAbhaÃàngigkeiten installieren
      shell: bash
      run: |
        set -x
        apt-get update --assume-yes
        UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
        apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
          install --assume-yes \
            libncurses-dev \
            libsqlite3-dev
    - name: AbhaÃàngigkeiten von Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        apt-get update --assume-yes
        UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
        apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
          install --assume-yes \
            curl
    - name: Arbeitsbereich installieren
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace version ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Auffrischen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace refresh ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: PruÃàfen
      shell: bash
      run: |
        set -x
        if workspace version > /dev/null 2>&1 ; then
            echo "Systeminstallation von Arbeitsbereich wird verwendet ..."
            workspace validate ‚Ä¢job miscellaneous ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        elif .build/SDG/Workspace/workspace version > /dev/null 2>&1 ; then
            echo "Lagerzwischenspeicher von Arbeitsbereich wird verwendet ..."
            .build/SDG/Workspace/workspace validate ‚Ä¢job miscellaneous ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        else
            echo "Keinen Zwischenspeicher gefunden; Arbeitsbereich wird geholt ..."
            export OVERRIDE_INSTALLATION_DIRECTORY=.build/SDG
            curl -sL https://gist.github.com/SDGGiesbrecht/4d76ad2f2b9c7bf9072ca1da9815d7e2/raw/update.sh | bash -s Workspace "https://github.com/SDGGiesbrecht/Workspace" [Current Version] "" workspace
            .build/SDG/Workspace/workspace validate ‚Ä¢job miscellaneous ‚Ä¢language 'üá©üá™DE' ‚Ä¢use‚Äêversion [Current Version]
        fi
    - name: Zugriffsrechte zum Zwischenspeichern erteilen
      shell: bash
      run: |
        set -x
        chmod -R a+rwx .
