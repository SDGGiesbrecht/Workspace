
$ workspace refresh scripts

Refreshing scripts...


$ swift package resolve

Writing to “Refresh (macOS).command”...
Writing to “Refresh (Linux).sh”...

$ swift package resolve

Writing to “Validate (macOS).command”...
$ workspace refresh resources

Refreshing resources...

$ workspace proofread

Normalizing files...


Proofreading source code... (§1)

Package.swift
README.md
Sources/Default/Default.swift
Tests/DefaultTests/DefaultTests.swift
Tests/LinuxMain.swift

$ swiftlint lint --strict --config [...]/SwiftLint/Configuration.yml --reporter emoji


$ swift package resolve


✓ Source code passes proofreading.


“Default” passes validation.

$ workspace validate build

Checking build for macOS with the Swift Package Manager... (§1)


$ swift build
Compile Swift Module 'Default' (1 sources)


Checking build for macOS with Xcode... (§2)


$ xcodebuild build -sdk macosx -scheme Default-Package
[...]



Checking build for iOS... (§3)


$ xcodebuild build -sdk iphoneos -scheme Default-Package
[...]



Checking build for watchOS... (§4)


$ xcodebuild build -sdk watchos -scheme Default-Package
[...]



Checking build for tvOS... (§5)


$ xcodebuild build -sdk appletvos -scheme Default-Package
[...]



✓ There are no compiler warnings for macOS with the Swift Package Manager.
✓ There are no compiler warnings for macOS with Xcode.
✓ There are no compiler warnings for iOS.
✓ There are no compiler warnings for watchOS.
✓ There are no compiler warnings for tvOS.


“Default” passes validation.

$ workspace test

Testing on macOS with the Swift Package Manager... (§1)


Testing on macOS with Xcode... (§2)


$ xcodebuild test -sdk macosx -scheme Default-Package
[...]



✓ Tests pass on macOS with Xcode.


“Default” passes validation.

$ workspace validate test‐coverage

Testing on macOS with Xcode... (§1)


$ xcodebuild test -sdk macosx -scheme Default-Package
[...]



Checking test coverage for “Default” on macOS... (§2)


✓ Tests pass on macOS with Xcode.
✓ Test coverage is complete for “Default” on macOS.


“Default” passes validation.

$ workspace validate documentation‐coverage

Generating documentation for “Default”...


$ jazzy --module Default --copyright "Copyright ©2018 the Default project contributors. All rights reserved." --documentation=Documentation/*.md --clean --use-safe-filenames --output "[...]/Documentation/Default" --xcodebuild-arguments "-scheme,Default-Package,-target,Default,-sdk,macosx,-derivedDataPath,[...]/Jazzy Build Artifacts"
0% documentation coverage with 0 undocumented symbols
skipped 1 private, fileprivate, or internal symbol (use `--min-acl` to specify a different minimum ACL)
jam out ♪♫ to your fresh new docs in `[...]/Documentation/Default`

Writing to “[...]/Documentation/Default/.nojekyll”...

$ swift package resolve


Checking documentation coverage for “Default”... (§1)


✓ Generated documentation for “Default”.
✓ Documentation coverage is complete for “Default”.


“Default” passes validation.

$ workspace proofread •xcode

$ swiftlint lint --strict --config [...]/SwiftLint/Configuration.yml --quiet

$ workspace validate build •job macos‐swift‐package‐manager

Checking build for macOS with the Swift Package Manager... (§1)


$ swift build


✓ There are no compiler warnings for macOS with the Swift Package Manager.


“Default” passes validation.
