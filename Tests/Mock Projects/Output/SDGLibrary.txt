
$ workspace refresh scripts

Refreshing scripts...

Writing to “Refresh (macOS).command”...
Writing to “Refresh (Linux).sh”...
Writing to “Validate (macOS).command”...
$ workspace refresh read‐me

Refreshing read‐me...

Writing to “Documentation/🇨🇦EN Read Me.md”...
Writing to “Documentation/🇨🇦EN Related Projects.md”...
Writing to “README.md”...
Writing to “Documentation/🇬🇧EN Read Me.md”...
Writing to “Documentation/🇬🇧EN Related Projects.md”...
Writing to “Documentation/🇺🇸EN Read Me.md”...
Writing to “Documentation/🇺🇸EN Related Projects.md”...
Writing to “Documentation/🇩🇪DE Read Me.md”...
Writing to “Documentation/🇩🇪DE Related Projects.md”...
Writing to “Documentation/🇫🇷FR Read Me.md”...
Writing to “Documentation/🇫🇷FR Related Projects.md”...
Writing to “Documentation/🇬🇷ΕΛ Read Me.md”...
Writing to “Documentation/🇬🇷ΕΛ Related Projects.md”...
Writing to “Documentation/🇮🇱עב Read Me.md”...
Writing to “Documentation/🇮🇱עב Related Projects.md”...
Writing to “Documentation/[zxx] Read Me.md”...
Writing to “Documentation/[zxx] Related Projects.md”...
Deleting “Documentation/Related Projects.md”...
$ workspace refresh continuous‐integration

Refreshing continuous integration configuration...

Writing to “.travis.yml”...
$ workspace refresh resources

Refreshing resources...

Writing to “Sources/Library/Resources.swift”...
$ workspace proofread

Normalizing files...

Writing to “.Workspace Configuration.txt”...
Writing to “Sources/Library/SDG.swift”...

Proofreading source code... (§1)

.Workspace Configuration.txt
.travis.yml
Documentation/[zxx] Read Me.md
Documentation/[zxx] Related Projects.md
Documentation/🇨🇦EN Read Me.md
Documentation/🇨🇦EN Related Projects.md
Documentation/🇩🇪DE Read Me.md
Documentation/🇩🇪DE Related Projects.md
Documentation/🇫🇷FR Read Me.md
Documentation/🇫🇷FR Related Projects.md
Documentation/🇬🇧EN Read Me.md
Documentation/🇬🇧EN Related Projects.md
Documentation/🇬🇷ΕΛ Read Me.md
Documentation/🇬🇷ΕΛ Related Projects.md
Documentation/🇮🇱עב Read Me.md
Documentation/🇮🇱עב Related Projects.md
Documentation/🇺🇸EN Read Me.md
Documentation/🇺🇸EN Related Projects.md
Package.swift
README.md
Sources/Library/Resources.swift
Sources/Library/SDG.swift
Tests/LinuxMain.swift
Tests/SDGTests/SDGTests.swift

$ swiftlint lint --strict --config [...]/SwiftLint/Configuration.yml --reporter emoji
Loading configuration from '[...]/SwiftLint/Configuration.yml'
Linting Swift files in current working directory
Linting '[...]' (1/5)
Linting '[...]' (2/5)
Linting '[...]' (3/5)
Linting '[...]' (4/5)
Linting '[...]' (5/5)
Done linting! Found 0 violations, 0 serious in 5 files.

✓ Source code passes proofreading.


“SDG” passes validation.

$ workspace validate build

Checking build for macOS with the Swift Package Manager... (§1)

$ swift build --configuration release --static-swift-stdlib
Compile Swift Module 'Dependency' (1 sources)
Compile Swift Module 'Library' (2 sources)

Checking build for macOS with Xcode... (§2)

$ xcodebuild build -sdk macosx -scheme SDG-Package
[...]

Checking build for iOS... (§3)

$ xcodebuild build -sdk iphoneos -scheme SDG-Package
[...]

Checking build for watchOS... (§4)

$ xcodebuild build -sdk watchos -scheme SDG-Package
[...]

Checking build for tvOS... (§5)

$ xcodebuild build -sdk appletvos -scheme SDG-Package
[...]

✓ There are no compiler warnings for macOS with the Swift Package Manager.
✓ There are no compiler warnings for macOS with Xcode.
✓ There are no compiler warnings for iOS.
✓ There are no compiler warnings for watchOS.
✓ There are no compiler warnings for tvOS.


“SDG” passes validation.

$ workspace test

Testing on macOS with the Swift Package Manager... (§1)

$ swift test
Compile Swift Module 'Dependency' (1 sources)
Compile Swift Module 'Library' (2 sources)
Compile Swift Module 'SDGTests' (1 sources)
Linking ./.build/x86_64-apple-macosx10.10/debug/SDGPackageTests.xctest/Contents/MacOS/SDGPackageTests

Testing on macOS with Xcode... (§2)

$ xcodebuild test -sdk macosx -scheme SDG-Package
[...]

✓ Tests pass on macOS with Xcode.


“SDG” passes validation.

$ workspace validate test‐coverage

Testing on macOS with Xcode... (§1)

$ xcodebuild test -sdk macosx -scheme SDG-Package
[...]

Checking test coverage on macOS... (§2)

Sources/Library/SDG.swift

✓ Tests pass on macOS with Xcode.
✓ Test coverage is complete on macOS.


“SDG” passes validation.

$ workspace validate documentation‐coverage

Generating documentation for “Library”...


$ jazzy --module Library --copyright "Copyright ©2017–2018 John Doe and the SDG project contributors. All rights reserved." --github_url "https://github.com/JohnDoe/SDG" --documentation=Documentation/*.md --clean --use-safe-filenames --output "[...]/Documentation/Library" --xcodebuild-arguments "-scheme,SDG-Package,-target,Library,-sdk,macosx,-derivedDataPath,[...]/Jazzy Build Artifacts"
Running xcodebuild
Parsing Resources.swift (1/2)
Parsing SDG.swift (2/2)
building site
building search index
0% documentation coverage with 0 undocumented symbols
skipped 6 private, fileprivate, or internal symbols (use `--min-acl` to specify a different minimum ACL)
jam out ♪♫ to your fresh new docs in `[...]/Documentation/Library`

Writing to “[...]/Documentation/Library/.nojekyll”...

Checking documentation coverage for “Library”... (§1)


✓ Generated documentation for “Library”.
✓ Documentation coverage is complete for “Library”.


“SDG” passes validation.

$ workspace proofread •xcode

$ swiftlint lint --strict --config [...]/SwiftLint/Configuration.yml --quiet