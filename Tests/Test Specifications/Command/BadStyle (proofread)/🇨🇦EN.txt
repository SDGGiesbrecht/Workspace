$ workspace proofread •no‐colour

Normalizing files...


Proofreading source code... (§1)

Resources now belong inside the target directory. (deprecatedResourceDirectory)
Resources
Resources now belong inside the target directory. (deprecatedResourceDirectory)
Resources
Resources now belong inside the target directory. (deprecatedResourceDirectory)
Resources
.gitignore
Other/CSS.css
Other/HTML.html
Other/JavaScript.js
Package.swift
Line 2
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// The swift-tools-version declares the minimum version of Swift required to build this package.

Line 2
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// The swift-tools-version declares the minimum version of Swift required to build this package.

README.md
Sources/BadStyle/BadStyle.swift
Line 1
Every symbol in a library should have access control. (accessControl)
struct BadStyle {

Line 2
Every symbol in a library should have access control. (accessControl)
    var text = "Hello, World!"

Sources/BadStyle/Normalization/Decomposition.swift
Line 3
Every symbol in a library should have access control. (accessControl)
let é = "ñ" // These should be decomposed.

Sources/BadStyle/Normalization/EmptyIndents.swift
Line 3
Every symbol in a library should have access control. (accessControl)
func indents() {

Sources/BadStyle/Normalization/MarkdownLineBreaks.md
Sources/BadStyle/Normalization/ShellExecutability.sh
Sources/BadStyle/Rules/Documentation/SyntaxColouring.swift
Line 7
Language specifier missing. Specify a language for syntax colouring. (syntaxColouring)
/// ```

Sources/BadStyle/Rules/Functionality/AccessControl.swift
Line 1
Every symbol in a library should have access control. (accessControl)
struct Structure {} // Should warn; no access control.

Line 3
Every symbol in a library should have access control. (accessControl)
class Class {} // Should warn; no access control.

Line 5
Every symbol in a library should have access control. (accessControl)
enum Enumeration {} // Should warn; no access control.

Line 7
Every symbol in a library should have access control. (accessControl)
typealias TypeAlias = Structure // Should warn; no access control.

Line 9
Every symbol in a library should have access control. (accessControl)
protocol Protocol {} // Should warn; no access control.

Line 11
Every symbol in a library should have access control. (accessControl)
func function() {} // Should warn; no access control.

Line 15
Every symbol in a library should have access control. (accessControl)
  init() {} // Should warn; no access control.

Line 17
Every symbol in a library should have access control. (accessControl)
  var variable: Int // Should warn; no access control.

Line 19
Every symbol in a library should have access control. (accessControl)
  subscript(_ index: Bool) -> Bool {  // Should warn; no access control.

Line 27
Every symbol in a library should have access control. (accessControl)
func localScope() {

Line 31
Every symbol in a library should have access control. (accessControl)
protocol ProtocolScope {

Line 25
Specify public access level for each member inside the extension. (swiftFormat[NoAccessLevelOnExtensionDeclaration])

Sources/BadStyle/Rules/Functionality/ClassFinality.swift
Line 1
Public classes should be open, final or explicitly exempt. (classFinality)
public class Class {} // Should warn; neither open nor final.

Line 8
Every symbol in a library should have access control. (accessControl)
class ImplicitInternal {} // Should not warn; compiler can infer finality.

Sources/BadStyle/Rules/Functionality/CompatibilityCharacters.swift
Line 3
U+00B2 may be lost in normalization; use “2” instead. (compatibilityCharacters)
let compatibility = "2"
let compatibility = "2"

Line 3
Every symbol in a library should have access control. (accessControl)
let compatibility = "2"

Sources/BadStyle/Rules/Functionality/ExplicitTypes.swift
Line 1
Public variables should have explicit types. (explicitTypes)
public var implit = "" // Should trigger; needs explicit type.

Sources/BadStyle/Rules/Functionality/Mark.swift
Line 3
Incomplete heading syntax. Use “// MARK: - ”. (marks)
/// MARK: This heading is malformed and should trigger.
// MARK: - This heading is malformed and should trigger.

Sources/BadStyle/Rules/Intentional/MissingImplementation.swift
Line 4
Missing implementation. (missingImplementation)
    notImplementedYet() // This should trigger a warning.

Line 3
Every symbol in a library should have access control. (accessControl)
func unfinished() {

Sources/BadStyle/Rules/Source Code Style/Asterisms.swift
Line 9
Markdown asterisms should be composed of asterisks. (asterisms)
/// ---
/// ***

Line 13
Markdown asterisms should be composed of asterisks. (asterisms)
/// ___
/// ***

Line 16
Every symbol in a library should have access control. (accessControl)
func testAsterisms() {}

Sources/BadStyle/Rules/Source Code Style/CalloutCasing.swift
Line 5
Callouts should be capitalized. (calloutCasing)
/// - warning: This should trigger. It should have been capitalized.
/// - Warning: This should trigger. It should have been capitalized.

Line 6
Every symbol in a library should have access control. (accessControl)
func callout() {}

Sources/BadStyle/Rules/Source Code Style/ClosureSignaturePosition.swift
Line 5
A closure’s signature should be on the same line as its opening brace. (closureSignaturePosition)
private let bad: (String) -> Void = {
    parameter in // Wrong position; should trigger.

Sources/BadStyle/Rules/Source Code Style/ListSeparation.swift
Line 1
Every symbol in a library should have access control. (accessControl)
let array = [
  1,
  2,
  3, // Should trigger.
]

Line 4
List separators should only occur between list elements. (listSeparation)
  3, // Should trigger.
  3 // Should trigger.

Sources/BadStyle/Rules/Source Code Style/MarkdownHeadings.swift
Line 8
Markdown headings should use number signs. (markdownHeadings)
/// -----------------------------------------

Line 11
Markdown headings should use number signs. (markdownHeadings)
/// =========================================

Line 12
Every symbol in a library should have access control. (accessControl)
func testHeadings() {}

Sources/BadStyle/Rules/Source Code Style/ParameterStyle.swift
Line 5
Parameters should be grouped under a single callout. (parameterGrouping)
/// - Parameter one: A parameter documented the wrong way, so trigger.

Line 6
Every symbol in a library should have access control. (accessControl)
func parameters(one: Bool, two: Bool) {}

Sources/BadStyle/Rules/Text Style/Bullets.swift
Line 7
Markdown lists should use ASCII bullets. (bullets)
/// * Should trigger; asterisks aren’t bullets.
/// - Should trigger; asterisks aren’t bullets.

Line 9
Markdown lists should use ASCII bullets. (bullets)
/// + Should trigger; plus signs aren’t bullets.
/// - Should trigger; plus signs aren’t bullets.

Line 12
Every symbol in a library should have access control. (accessControl)
func testBullets() {}

Sources/BadStyle/Rules/Text Style/Unicode.swift
Line 5
The character U+0022 is obsolete. Use quotation marks (“, ”) or double prime (′′). (unicode)
// "These quotation marks are generic and should trigger."

Line 5
The character U+0022 is obsolete. Use quotation marks (“, ”) or double prime (′′). (unicode)
// "These quotation marks are generic and should trigger."

Line 9
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// Trigger, because this is not a minus sign: a - b

Line 11
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// #workaround(bash --version 1000.0.0, The stroke should warn and an exemption should be required.)

Line 11
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// #workaround(bash --version 1000.0.0, The stroke should warn and an exemption should be required.)

Line 19
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
/// - RecommendedOver: -

Line 20
Every symbol in a library should have access control. (accessControl)
func −(lhs: Int, rhs: Int) -> Int {

Line 24
Every symbol in a library should have access control. (accessControl)
func useNumeric() -> Int {

Line 28
Every symbol in a library should have access control. (accessControl)
let ln2: Float80 = 0x1.62E42FEFA39EF358p-1 // Generic stroke must be allowed in float literals.

Line 35
Every symbol in a library should have access control. (accessControl)
func shellSource() {

Line 41
The character U+0027 is obsolete. Use an apostrophe (’), quotation marks (‘, ’), degrees (°) or prime (′). (unicode)
// 'These quotation marks are generic and should trigger.'

Line 41
The character U+0027 is obsolete. Use an apostrophe (’), quotation marks (‘, ’), degrees (°) or prime (′). (unicode)
// 'These quotation marks are generic and should trigger.'

Line 46
The character sequence “&&” is obsolete. Use the conjunction sign (∧). (unicode)
// Trigger, because this is not a conjunction sign: a && b
// Trigger, because this is not a conjunction sign: a ∧ b

Line 47
The character sequence “||” is obsolete. Use the disjunction sign (∨). (unicode)
// Trigger, because this is not a disjunction sign: a || b
// Trigger, because this is not a disjunction sign: a ∨ b

Line 51
The character sequence “!=” is obsolete. Use the not equal sign (≠). (unicode)
// Trigger, because this is not a not‐equal sign: a != b
// Trigger, because this is not a not‐equal sign: a ≠ b

Line 52
The character sequence “<=” is obsolete. Use the less‐than‐or‐equal sign (≤). (unicode)
// Trigger, because this is not a less‐than‐or‐equal‐to sign: a <= b
// Trigger, because this is not a less‐than‐or‐equal‐to sign: a ≤ b

Line 53
The character sequence “>=” is obsolete. Use the greater‐than‐or‐equal sign (≥). (unicode)
// Trigger, because this is not a greater‐than‐or‐equal‐to sign: a >= b
// Trigger, because this is not a greater‐than‐or‐equal‐to sign: a ≥ b

Line 57
Every symbol in a library should have access control. (accessControl)
let x = a * b // Trigger, because this is not a multiplication sign.

Line 57
The character “*” is obsolete. Use the multiplication sign (×). (Create an alias if necessary.) (unicode)
let x = a * b // Trigger, because this is not a multiplication sign.
let x = a × b // Trigger, because this is not a multiplication sign.

Line 58
The character sequence “*=” is obsolete. Use the multiplication sign (×). (unicode)
// Trigger, because this is not a multiplication sign: a *= b
// Trigger, because this is not a multiplication sign: a ×= b

Line 59
Every symbol in a library should have access control. (accessControl)
let x = a / b // Trigger, because this is not a division sign.

Line 59
The character “/” is obsolete. Use the division sign (÷). (Create an alias if necessary.) (unicode)
let x = a / b // Trigger, because this is not a division sign.
let x = a ÷ b // Trigger, because this is not a division sign.

Line 60
The character sequence “/=” is obsolete. Use the division sign (÷). (unicode)
// Trigger, because this is not a division sign: a /= b
// Trigger, because this is not a division sign: a ÷= b

Line 64
Every symbol in a library should have access control. (accessControl)
let x = y - z // This should trigger and mention aliasing.

Line 64
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (Create an alias if necessary.) (unicode)
let x = y - z // This should trigger and mention aliasing.

Line 66
Every symbol in a library should have access control. (accessControl)
let x = !y // This should trigger; it is a prefix operator.

Line 66
The character “!” is obsolete. Use the not sign (¬). (Create an alias if necessary.) (unicode)
let x = !y // This should trigger; it is a prefix operator.
let x = ¬y // This should trigger; it is a prefix operator.

Line 73
Every symbol in a library should have access control. (accessControl)
func useAvailability() {

Sources/BadStyle/SwiftFormat.swift
Line 2
Every symbol in a library should have access control. (accessControl)
let TriggerSwiftFormatWithBadCasing = true

Line 3
Every symbol in a library should have access control. (accessControl)
let DontTrigger = false  // @exempt(from: swiftFormat[AlwaysUseLowerCamelCase])

Line 2
Rename constant 'TriggerSwiftFormatWithBadCasing' using lower-camel-case. (swiftFormat[AlwaysUseLowerCamelCase])
let TriggerSwiftFormatWithBadCasing = true

Sources/BadStyle/Warnings/Warning.swift
Line 3
This should trigger a warning. (manualWarnings)
// #warning(This should trigger a warning.)

Sources/BadStyle/Warnings/Workaround.swift
Line 3
Workaround: This should trigger. The workaround may no longer be necessary. (workaroundReminders)
// #workaround(Dependency 0.9.9, This should trigger. The workaround may no longer be necessary.)

Line 6
Workaround: This should trigger. The workaround may no longer be necessary. (workaroundReminders)
// #workaround(Swift 3, This should trigger. The workaround may no longer be necessary.)

Line 9
Workaround: This should trigger. The workaround may no longer be necessary. (workaroundReminders)
// #workaround(echo 1.0.0 0.9.9, This should trigger. The workaround may no longer be necessary.)

Line 12
Workaround: This should trigger no matter what. (workaroundReminders)
// #workaround(This should trigger no matter what.)

Line 13
Workaround: This malformed version check should trigger. (workaroundReminders)
// #workaround(echo oops 1.0.0, This malformed version check should trigger.)

Sources/executable/AccessControl.swift
Line 1
Executables and tests should not contain access control. (accessControl)
internal struct ShouldNot {} // Should warn; should not have access control.
 struct ShouldNot {} // Should warn; should not have access control.

Line 2
Replace 'fileprivate' with 'private' on file-scoped declarations. (swiftFormat[FileScopedDeclarationPrivacy])

Sources/executable/main.swift
Tests/BadStyleTests/BadStyleTests.swift
Tests/BadStyleTests/XCTestManifests.swift
Line 1
Test manifests are no longer necessary. (deprecatedTestManifests)
#if !canImport(ObjectiveC)
import XCTest

extension BadStyleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BadStyleTests = [
        ("testExample", testExample),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BadStyleTests.__allTests__BadStyleTests),
    ]
}
#endif

Line 6
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
    //   `swift test --generate-linuxmain`

Line 6
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
    //   `swift test --generate-linuxmain`

Line 6
The character U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
    //   `swift test --generate-linuxmain`

Line 9
List separators should only occur between list elements. (listSeparation)
        ("testExample", testExample),
        ("testExample", testExample)

Line 13
Executables and tests should not contain access control. (accessControl)
public func __allTests() -> [XCTestCaseEntry] {
 func __allTests() -> [XCTestCaseEntry] {

Line 15
List separators should only occur between list elements. (listSeparation)
        testCase(BadStyleTests.__allTests__BadStyleTests),
        testCase(BadStyleTests.__allTests__BadStyleTests)

Line 8
Rename constant '__allTests__BadStyleTests' using lower-camel-case. (swiftFormat[AlwaysUseLowerCamelCase])
    static let __allTests__BadStyleTests = [

Line 13
Rename function '__allTests' using lower-camel-case. (swiftFormat[AlwaysUseLowerCamelCase])
public func __allTests() -> [XCTestCaseEntry] {

Tests/LinuxMain.swift
Line 1
Test manifests are no longer necessary. (deprecatedTestManifests)
import XCTest

import BadStyleTests

var tests = [XCTestCaseEntry]()
tests += BadStyleTests.__allTests()

XCTMain(tests)


$ Dependency fail
Hello, world!

✗ Source code fails proofreading. (See [⌘F] “§1”)

“BadStyle” fails validation.
2
