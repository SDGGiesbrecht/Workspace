$ workspace validate •no‐colour
[Refreshing ...]

Validating “Default”...


Normalizing files...


Proofreading source code... (§1)

.gitignore
Package.swift
Line 2
U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// The swift-tools-version declares the minimum version of Swift required to build this package.

Line 2
U+002D is obsolete. Use a hyphen (‐), minus sign (−), dash (—), bullet (•) or range symbol (–). (unicode)
// The swift-tools-version declares the minimum version of Swift required to build this package.

Line 16
U+0022 is obsolete. Use quotation marks (“, ”) or double prime (′′). (unicode)
        // .package(url: /* package url */, from: "1.0.0"),

Line 16
U+0022 is obsolete. Use quotation marks (“, ”) or double prime (′′). (unicode)
        // .package(url: /* package url */, from: "1.0.0"),

README.md
Sources/Default/Default.swift
Tests/DefaultTests/DefaultTests.swift
Line 4
Colons should be preceded by spaces when denoting protocols or superclasses. (colonSpacing)
final class DefaultTests: XCTestCase {
final class DefaultTests : XCTestCase {

Tests/DefaultTests/XCTestManifests.swift
Line 3
Undocumented compilation condition. Add “// MARK: - #if...” on the next line. (documentationOfCompilationConditions)
#if !canImport(ObjectiveC)

Tests/LinuxMain.swift

[$ swiftlint...]

Checking build for macOS with the Swift Package Manager... (§2)

[$ swift...]

Checking build for macOS with Xcode... (§3)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Checking build for iOS... (§4)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Checking build for watchOS... (§5)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Checking build for tvOS... (§6)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Testing on macOS with Xcode... (§7)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Checking test coverage on macOS... (§8)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Generating documentation for “Default”... (§9)

The package has no Xcode project.
Configure “xcode.manage” or create an Xcode project manually.

Checking documentation coverage for “Default”... (§10)

The file “undocumented.json” couldn’t be opened because there is no such file.

Summary


✗ Source code fails proofreading. (See [⌘F] “§1”)
✓ There are no compiler warnings for macOS with the Swift Package Manager.
✗ Build failed for macOS with Xcode. (See [⌘F] “§3”)
✗ Build failed for iOS. (See [⌘F] “§4”)
✗ Build failed for watchOS. (See [⌘F] “§5”)
✗ Build failed for tvOS. (See [⌘F] “§6”)
✗ Tests fail on macOS with Xcode. (See [⌘F] “§7”)
✗ Test coverage could not be determined on macOS. (See [⌘F] “§8”)
✗ Failed to generate documentation for “Default”. (See [⌘F] “§9”)
✗ Documentation coverage information is unavailable for “Default”. (See [⌘F] “§10”)

“Default” fails validation.
2
